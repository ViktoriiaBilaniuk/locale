"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var utils_1 = require("./../../utils");
var TypeChecker_1 = require("./TypeChecker");
var results_1 = require("./results");
/**
 * Wrapper around Program.
 */
var Program = /** @class */ (function () {
    /** @internal */
    function Program(global, rootNames, host) {
        this.global = global;
        this.typeChecker = new TypeChecker_1.TypeChecker(this.global);
        this.reset(rootNames, host);
    }
    Object.defineProperty(Program.prototype, "compilerObject", {
        /**
         * Gets the underlying compiler program.
         */
        get: function () {
            return this._compilerObject;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resets the program.
     * @internal
     */
    Program.prototype.reset = function (rootNames, host) {
        var compilerOptions = this.global.compilerOptions;
        var oldProgram = this._compilerObject;
        this._compilerObject = getNewProgram();
        this.typeChecker.reset(this._compilerObject.getTypeChecker());
        function getNewProgram() {
            try {
                // try to reuse the old compiler object
                return ts.createProgram(rootNames, compilerOptions, host, oldProgram);
            }
            catch (err) {
                utils_1.Logger.warn("Could not create new program from old program. " + err);
                // if that fails, try without using the old program
                return ts.createProgram(rootNames, compilerOptions, host);
            }
        }
    };
    /**
     * Get the program's type checker.
     */
    Program.prototype.getTypeChecker = function () {
        return this.typeChecker;
    };
    /**
     * Emits the TypeScript files to the specified target.
     */
    Program.prototype.emit = function (options) {
        if (options === void 0) { options = {}; }
        var targetSourceFile = options != null && options.targetSourceFile != null ? options.targetSourceFile.compilerNode : undefined;
        var cancellationToken = undefined; // todo: expose this
        var emitOnlyDtsFiles = options != null && options.emitOnlyDtsFiles != null ? options.emitOnlyDtsFiles : undefined;
        var customTransformers = undefined; // todo: expose this
        var emitResult = this.compilerObject.emit(targetSourceFile, undefined, cancellationToken, emitOnlyDtsFiles, customTransformers);
        return new results_1.EmitResult(this.global, emitResult);
    };
    return Program;
}());
exports.Program = Program;

//# sourceMappingURL=Program.js.map
