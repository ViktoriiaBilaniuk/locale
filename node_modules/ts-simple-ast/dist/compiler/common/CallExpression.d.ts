import * as ts from "typescript";
import { Node } from "./Node";
import { Expression } from "./Expression";
import { ArgumentedNode, TypeArgumentedNode } from "./../base";
import { Type } from "./../type";
export declare const CallExpressionBase: (new (...args: any[]) => TypeArgumentedNode) & (new (...args: any[]) => ArgumentedNode) & typeof Node;
export declare class CallExpression extends CallExpressionBase<ts.CallExpression> {
    /**
     * Gets the call expression's expression.
     */
    getExpression(): Expression<ts.Expression>;
    /**
     * Gets the return type of the call expression.
     */
    getReturnType(): Type;
}
