"use strict";
var __extends = (this && this.__extends)/* istanbul ignore next */ || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var errors = require("./../../../errors");
var base_1 = require("./../../base");
var Node_1 = require("./../Node");
exports.ShorthandPropertyAssignmentBase = base_1.InitializerGetExpressionableNode(base_1.QuestionTokenableNode(base_1.NamedNode(Node_1.Node)));
var ShorthandPropertyAssignment = /** @class */ (function (_super) {
    __extends(ShorthandPropertyAssignment, _super);
    function ShorthandPropertyAssignment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // todo #65: Implement manipulation for initiailizer (need to forget this node and change to PropertyAssignment)
    // todo #65: Manipulation methods for the below
    /**
     * Gets the object assignment initializer or throws if it doesn't exist.
     */
    ShorthandPropertyAssignment.prototype.getObjectAssignmentInitializerOrThrow = function () {
        return errors.throwIfNullOrUndefined(this.getObjectAssignmentInitializer(), "Expected to find an object assignment initializer.");
    };
    /**
     * Gets the object assignment initializer if it exists.
     */
    ShorthandPropertyAssignment.prototype.getObjectAssignmentInitializer = function () {
        var initializer = this.compilerNode.objectAssignmentInitializer;
        if (initializer == null)
            return undefined;
        return this.global.compilerFactory.getNodeFromCompilerNode(initializer, this.sourceFile);
    };
    /**
     * Gets the equals token or throws if it doesn't exist.
     */
    ShorthandPropertyAssignment.prototype.getEqualsTokenOrThrow = function () {
        return errors.throwIfNullOrUndefined(this.getEqualsToken(), "Expected to find an equals token.");
    };
    /**
     * Gets the equals token if it exists.
     */
    ShorthandPropertyAssignment.prototype.getEqualsToken = function () {
        var equalsToken = this.compilerNode.equalsToken;
        if (equalsToken == null)
            return undefined;
        return this.global.compilerFactory.getNodeFromCompilerNode(equalsToken, this.sourceFile);
    };
    return ShorthandPropertyAssignment;
}(exports.ShorthandPropertyAssignmentBase));
exports.ShorthandPropertyAssignment = ShorthandPropertyAssignment;

//# sourceMappingURL=ShorthandPropertyAssignment.js.map
