import * as ts from "typescript";
import { Constructor } from "./../../../Constructor";
import { Node } from "./../../common";
import { InitializerGetExpressionableNode } from "./InitializerGetExpressionableNode";
export declare type InitializerSetExpressionableExtensionType = Node<ts.Node & {
    initializer?: ts.Expression;
}> & InitializerGetExpressionableNode;
export interface InitializerSetExpressionableNode {
    /**
     * Removes the initailizer.
     */
    removeInitializer(): this;
    /**
     * Sets the initializer.
     * @param text - New text to set for the initializer.
     */
    setInitializer(text: string): this;
}
export declare function InitializerSetExpressionableNode<T extends Constructor<InitializerSetExpressionableExtensionType>>(Base: T): Constructor<InitializerSetExpressionableNode> & T;
