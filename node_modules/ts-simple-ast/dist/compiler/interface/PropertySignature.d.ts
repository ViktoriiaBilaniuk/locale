import * as ts from "typescript";
import { PropertySignatureStructure } from "./../../structures";
import { Node } from "./../common";
import { PropertyNamedNode, TypedNode, InitializerExpressionableNode, QuestionTokenableNode, ReadonlyableNode, DocumentationableNode, ModifierableNode, ChildOrderableNode } from "./../base";
export declare const PropertySignatureBase: (new (...args: any[]) => ChildOrderableNode) & (new (...args: any[]) => DocumentationableNode) & (new (...args: any[]) => ReadonlyableNode) & (new (...args: any[]) => QuestionTokenableNode) & (new (...args: any[]) => InitializerExpressionableNode) & (new (...args: any[]) => TypedNode) & (new (...args: any[]) => PropertyNamedNode) & (new (...args: any[]) => ModifierableNode) & typeof Node;
export declare class PropertySignature extends PropertySignatureBase<ts.PropertySignature> {
    /**
     * Fills the node from a structure.
     * @param structure - Structure to fill.
     */
    fill(structure: Partial<PropertySignatureStructure>): this;
    /**
     * Removes this property signature.
     */
    remove(): void;
}
