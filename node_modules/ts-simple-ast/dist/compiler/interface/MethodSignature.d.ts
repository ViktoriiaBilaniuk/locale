import * as ts from "typescript";
import { MethodSignatureStructure } from "./../../structures";
import { Node } from "./../common";
import { PropertyNamedNode, QuestionTokenableNode, DocumentationableNode, ChildOrderableNode } from "./../base";
import { SignaturedDeclaration } from "./../function";
export declare const MethodSignatureBase: (new (...args: any[]) => ChildOrderableNode) & (new (...args: any[]) => DocumentationableNode) & (new (...args: any[]) => QuestionTokenableNode) & (new (...args: any[]) => SignaturedDeclaration) & (new (...args: any[]) => PropertyNamedNode) & typeof Node;
export declare class MethodSignature extends MethodSignatureBase<ts.MethodSignature> {
    /**
     * Fills the node from a structure.
     * @param structure - Structure to fill.
     */
    fill(structure: Partial<MethodSignatureStructure>): this;
    /**
     * Removes this method signature.
     */
    remove(): void;
}
