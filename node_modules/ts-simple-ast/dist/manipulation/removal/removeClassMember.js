"use strict";
var __read = (this && this.__read)/* istanbul ignore next */ || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread)/* istanbul ignore next */ || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var formatting_1 = require("./../formatting");
var removeChildrenWithFormatting_1 = require("./removeChildrenWithFormatting");
var removeChildren_1 = require("./removeChildren");
function removeOverloadableClassMember(classMember) {
    if (classMember.isOverload()) {
        if (classMember.getParentOrThrow().isAmbient())
            removeClassMember(classMember);
        else
            removeChildren_1.removeChildren({ children: [classMember], removeFollowingSpaces: true, removeFollowingNewLines: true });
    }
    else
        removeClassMembers(__spread(classMember.getOverloads(), [classMember]));
}
exports.removeOverloadableClassMember = removeOverloadableClassMember;
function removeClassMember(classMember) {
    removeClassMembers([classMember]);
}
exports.removeClassMember = removeClassMember;
function removeClassMembers(classMembers) {
    removeChildrenWithFormatting_1.removeChildrenWithFormatting({
        getSiblingFormatting: formatting_1.getClassMemberFormatting,
        children: classMembers
    });
}
exports.removeClassMembers = removeClassMembers;

//# sourceMappingURL=removeClassMember.js.map
