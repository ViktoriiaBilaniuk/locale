"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var InputTrimDirective = (function (_super) {
    __extends(InputTrimDirective, _super);
    function InputTrimDirective(renderer, elementRef, compositionMode) {
        var _this = _super.call(this, renderer, elementRef, compositionMode) || this;
        _this._type = 'text';
        _this._sourceRenderer = renderer;
        _this._sourceElementRef = elementRef;
        return _this;
    }
    Object.defineProperty(InputTrimDirective.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            this._type = value || 'text';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputTrimDirective.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (val) {
            this.writeValue(val);
            if (val !== this.value) {
                this._value = val;
                this.onChange(val);
            }
        },
        enumerable: true,
        configurable: true
    });
    InputTrimDirective.prototype.onBlur = function (event, value) {
        if (value.trim() !== this.value) {
            this.updateValue(event, value);
        }
        this.onTouched();
    };
    InputTrimDirective.prototype.onInput = function (event, value) {
        this.updateValue(event, value);
    };
    InputTrimDirective.prototype.writeValue = function (value) {
        if (!this._value) {
            this._value = value;
        }
        this._sourceRenderer.setProperty(this._sourceElementRef.nativeElement, 'value', value);
        if (this._type !== 'text') {
            this._sourceRenderer.setAttribute(this._sourceElementRef.nativeElement, 'value', value);
        }
    };
    InputTrimDirective.prototype.updateValue = function (event, value) {
        this.value = (this.trim !== '' && event !== this.trim) ? value : value.trim();
    };
    InputTrimDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: 'input[trim], textarea[trim]',
                    providers: [{ provide: forms_1.NG_VALUE_ACCESSOR, useExisting: InputTrimDirective, multi: true }]
                },] },
    ];
    InputTrimDirective.ctorParameters = function () { return [
        { type: core_1.Renderer2, decorators: [{ type: core_1.Inject, args: [core_1.Renderer2,] },] },
        { type: core_1.ElementRef, decorators: [{ type: core_1.Inject, args: [core_1.ElementRef,] },] },
        { type: undefined, decorators: [{ type: core_1.Optional }, { type: core_1.Inject, args: [forms_1.COMPOSITION_BUFFER_MODE,] },] },
    ]; };
    InputTrimDirective.propDecorators = {
        "trim": [{ type: core_1.Input },],
        "type": [{ type: core_1.Input },],
        "onBlur": [{ type: core_1.HostListener, args: ['blur', ['$event.type', '$event.target.value'],] },],
        "onInput": [{ type: core_1.HostListener, args: ['input', ['$event.type', '$event.target.value'],] },],
    };
    return InputTrimDirective;
}(forms_1.DefaultValueAccessor));
exports.InputTrimDirective = InputTrimDirective;
