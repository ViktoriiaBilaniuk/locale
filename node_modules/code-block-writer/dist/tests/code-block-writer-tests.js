"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var code_block_writer_1 = require("./../code-block-writer");
describe("CodeBlockWriter", function () {
    describe("default opts", function () {
        it("should use a \n newline if none is specified", function () {
            var writer = new code_block_writer_1.default();
            writer.writeLine("test");
            assert.equal(writer.toString(), "test\n");
        });
    });
    describe("tests for \n", function () {
        runTestsForNewLineChar({ newLine: "\n" });
    });
    describe("tests for \r\n", function () {
        runTestsForNewLineChar({ newLine: "\r\n" });
    });
});
function runTestsForNewLineChar(opts) {
    function getWriter() {
        return new code_block_writer_1.default(opts);
    }
    function doTest(expected, writerCallback) {
        var writer = getWriter();
        writerCallback(writer);
        assert.equal(writer.toString(), expected.replace(/\r?\n/g, opts.newLine));
    }
    describe("#write()", function () {
        it("should write a single letter", function () {
            var expected = "a";
            doTest(expected, function (writer) {
                writer.write("a");
            });
        });
        it("should write the text", function () {
            var expected = "test";
            doTest(expected, function (writer) {
                writer.write("test");
            });
        });
        it("should do nothing if providing a null string", function () {
            var expected = "";
            doTest(expected, function (writer) {
                writer.write(null);
            });
        });
        it("should indent if it's passed a newline character inside a block", function () {
            var expected = "test {\n    inside\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.write("inside" + opts.newLine + "inside");
                });
            });
        });
        it("should write all requested newlines", function () {
            var expected = "\n\ntest\n\n";
            doTest(expected, function (writer) {
                writer.write("\n\ntest\n\n");
            });
        });
    });
    describe("#block()", function () {
        it("should write text inside a block", function () {
            var expected = "test {\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test").block(function () {
                    writer.write("inside");
                });
            });
        });
        it("should write text inside a block inside a block", function () {
            var expected = "test {\n    inside {\n        inside again\n    }\n}";
            doTest(expected, function (writer) {
                writer.write("test").block(function () {
                    writer.write("inside").block(function () {
                        writer.write("inside again");
                    });
                });
            });
        });
        it("should not do an extra space if there was a space added before the block", function () {
            var expected = "test {\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.write("inside");
                });
            });
        });
        it("should put the brace on the next space if there is a newline before it", function () {
            var expected = "test {\n    inside\n\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.writeLine("inside").newLine().write("inside");
                });
            });
        });
        it("should not add an extra newline if the last character written in the block was a newline", function () {
            var expected = "test {\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.writeLine("inside");
                });
            });
        });
        it("should add a newline after the block when writing afterwards", function () {
            var expected = " {\n    t;\n}\n ";
            doTest(expected, function (writer) {
                writer.block(function () { return writer.write("t;"); }).write(" ");
            });
        });
        it("should not add a newline after the block when doing a condition call and the conditions are false", function () {
            var expected = " {\n    t;\n}";
            doTest(expected, function (writer) {
                writer.block(function () { return writer.write("t;"); }).conditionalWrite(false, " ").conditionalWriteLine(false, " ").conditionalNewLine(false);
            });
        });
    });
    describe("#inlineBlock()", function () {
        it("should do an inline block correctly", function () {
            var expected = "someCall({\n    console.log();\n});";
            doTest(expected, function (writer) {
                writer.write("someCall(").inlineBlock(function () {
                    writer.write("console.log();");
                }).write(");");
            });
        });
    });
    describe("#writeLine()", function () {
        it("should write some text on a line", function () {
            var expected = "test\n";
            doTest(expected, function (writer) {
                writer.writeLine("test");
            });
        });
        it("should start writing on a newline if the last one was just writing", function () {
            var expected = "test\ntest\ntest\n";
            doTest(expected, function (writer) {
                writer.writeLine("test").write("test").writeLine("test");
            });
        });
        it("should not create a newline between two writeLines", function () {
            var expected = "test\ntest\n";
            doTest(expected, function (writer) {
                writer.writeLine("test").writeLine("test");
            });
        });
    });
    describe("#blankLine()", function () {
        it("should do a blank line if the last text was not a new line", function () {
            var expected = "test\n\ntest";
            doTest(expected, function (writer) {
                writer.write("test").blankLine().write("test");
            });
        });
        it("should do a blank line if the last text was a newline", function () {
            var expected = "test\n\ntest";
            doTest(expected, function (writer) {
                writer.writeLine("test").blankLine().write("test");
            });
        });
        it("should do a blank line if the last was a blank line", function () {
            var expected = "test\n\n\ntest";
            doTest(expected, function (writer) {
                writer.writeLine("test").blankLine().blankLine().write("test");
            });
        });
    });
    describe("#indent()", function () {
        it("should indent as necessary", function () {
            var expected = "test\n    test";
            doTest(expected, function (writer) {
                writer.writeLine("test").indent().write("test");
            });
        });
    });
    describe("#newLineIfLastNotNewLine()", function () {
        it("should do a newline if the last text was not a newline", function () {
            var expected = "test\n";
            doTest(expected, function (writer) {
                writer.write("test").newLineIfLastNotNewLine();
            });
        });
        it("should not do a newline if the last text was a newline", function () {
            var expected = "test\n";
            doTest(expected, function (writer) {
                writer.writeLine("test").newLineIfLastNotNewLine();
            });
        });
    });
    describe("#newLine()", function () {
        it("should do a newline when writing", function () {
            var expected = "test\n";
            doTest(expected, function (writer) {
                writer.write("test").newLine();
            });
        });
        it("should do a newline after doing a newline", function () {
            var expected = "test\n\ntext";
            doTest(expected, function (writer) {
                writer.write("test").newLine().newLine().write("text");
            });
        });
        it("should allow doing a newline at the start", function () {
            var expected = "\n";
            doTest(expected, function (writer) {
                writer.newLine();
            });
        });
        it("should allow doing a newline after doing a block", function () {
            var expected = "test {\n\n    test\n}";
            doTest(expected, function (writer) {
                writer.write("test").block(function () {
                    writer.newLine().writeLine("test");
                });
            });
        });
        it("should allow doing a newline if the last line was a blank line (allow consecutive blank lines)", function () {
            var expected = "test\n\n\ntext";
            doTest(expected, function (writer) {
                writer.write("test").newLine().newLine().newLine().write("text");
            });
        });
        it("should do a newline if a string causes it to not be a consecutive blank line", function () {
            var expected = "test\na\n";
            doTest(expected, function (writer) {
                writer.write("test").newLine().write("a").newLine();
            });
        });
        it("should never have two newlines at the end of a file", function () {
            var expected = "text\n";
            doTest(expected, function (writer) {
                writer.write("text").newLine().newLine();
            });
        });
        it("should indent if it's passed a newline character inside a block", function () {
            var expected = "test {\n    inside\n    inside\n}";
            doTest(expected, function (writer) {
                writer.write("test ").block(function () {
                    writer.writeLine("inside" + opts.newLine + "inside");
                });
            });
        });
    });
    describe("#spaceIfLastNotSpace()", function () {
        it("should do a space at the beginning of the file", function () {
            var expected = " ";
            doTest(expected, function (writer) {
                writer.spaceIfLastNotSpace();
            });
        });
        it("should do a space if the last character wasn't a space", function () {
            var expected = "test ";
            doTest(expected, function (writer) {
                writer.write("test").spaceIfLastNotSpace();
            });
        });
        it("should not do a space if the last character was a space", function () {
            var expected = "test ";
            doTest(expected, function (writer) {
                writer.write("test").spaceIfLastNotSpace().spaceIfLastNotSpace();
            });
        });
        it("should do a space if the last character was a newline", function () {
            var expected = "test\n ";
            doTest(expected, function (writer) {
                writer.write("test").newLine().spaceIfLastNotSpace();
            });
        });
    });
    describe("#getLength()", function () {
        it("should return the length", function () {
            var writer = getWriter();
            writer.write("1234");
            assert.equal(writer.getLength(), 4);
        });
    });
    describe("#conditionalNewLine()", function () {
        it("should write when the condition is true", function () {
            doTest("t\n", function (writer) {
                writer.write("t").conditionalNewLine(true);
            });
        });
        it("should not write when the condition is false", function () {
            doTest("t", function (writer) {
                writer.write("t").conditionalNewLine(false);
            });
        });
    });
    describe("#conditionalWrite()", function () {
        it("should write when the condition is true", function () {
            doTest("test", function (writer) {
                writer.conditionalWrite(true, "test");
            });
        });
        it("should not write when the condition is false", function () {
            doTest("", function (writer) {
                writer.conditionalWrite(false, "test");
            });
        });
    });
    describe("#conditionalWriteLine()", function () {
        it("should write when the condition is true", function () {
            doTest("test\n", function (writer) {
                writer.conditionalWriteLine(true, "test");
            });
        });
        it("should not write when the condition is false", function () {
            doTest("", function (writer) {
                writer.conditionalWriteLine(false, "test");
            });
        });
    });
}
describe("indentNumberOfSpaces", function () {
    var writer = new code_block_writer_1.default({ indentNumberOfSpaces: 2 });
    writer.write("do").block(function () {
        writer.write("something");
    });
    var expected = "do {\n  something\n}";
    it("should indent 2 spaces", function () {
        assert.equal(writer.toString(), expected);
    });
});
describe("useTabs", function () {
    var writer = new code_block_writer_1.default({ useTabs: true });
    writer.write("do").block(function () {
        writer.write("do").block(function () {
            writer.write("something");
        });
    });
    var expected = "do {\n\tdo {\n\t\tsomething\n\t}\n}";
    it("should use tabs", function () {
        assert.equal(writer.toString(), expected);
    });
});

//# sourceMappingURL=code-block-writer-tests.js.map
