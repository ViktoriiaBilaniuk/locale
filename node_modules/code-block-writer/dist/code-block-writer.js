"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CodeBlockWriter = (function () {
    function CodeBlockWriter(opts) {
        this._currentIndentation = 0;
        this._text = "";
        this._isAtStartOfBlock = false;
        this._newLineOnNextWrite = false;
        this._newLine = (opts && opts.newLine) || "\n";
        this._indentationText = getIndentationText((opts && opts.useTabs) || false, (opts && opts.indentNumberOfSpaces) || 4);
    }
    CodeBlockWriter.prototype.block = function (block) {
        this.newLineIfNewLineOnNextWrite();
        this.spaceIfLastNotSpace();
        this.inlineBlock(block);
        this._newLineOnNextWrite = true;
        return this;
    };
    CodeBlockWriter.prototype.inlineBlock = function (block) {
        this.newLineIfNewLineOnNextWrite();
        this.write("{");
        this._currentIndentation++;
        this.newLine();
        this._isAtStartOfBlock = true;
        block();
        this._currentIndentation--;
        this.newLineIfLastNotNewLine().write("}");
        return this;
    };
    CodeBlockWriter.prototype.conditionalWriteLine = function (condition, str) {
        if (condition)
            this.writeLine(str);
        return this;
    };
    CodeBlockWriter.prototype.writeLine = function (str) {
        this.newLineIfNewLineOnNextWrite();
        if (this._text.length > 0)
            this.newLineIfLastNotNewLine();
        this.writeIndentingNewLines(str);
        this.newLine();
        return this;
    };
    CodeBlockWriter.prototype.newLineIfLastNotNewLine = function () {
        this.newLineIfNewLineOnNextWrite();
        if (!this.isLastCharANewLine())
            this.newLine();
        return this;
    };
    CodeBlockWriter.prototype.blankLine = function () {
        return this.newLineIfLastNotNewLine().newLine();
    };
    CodeBlockWriter.prototype.indent = function () {
        this.newLineIfNewLineOnNextWrite();
        return this.write(this._indentationText);
    };
    CodeBlockWriter.prototype.conditionalNewLine = function (condition) {
        if (condition)
            this.newLine();
        return this;
    };
    CodeBlockWriter.prototype.newLine = function () {
        this._newLineOnNextWrite = false;
        this.baseWrite(this._newLine);
        return this;
    };
    CodeBlockWriter.prototype.spaceIfLastNotSpace = function () {
        this.newLineIfNewLineOnNextWrite();
        var lastChar = this.getLastChar();
        if (lastChar !== " ")
            this.baseWrite(" ");
        return this;
    };
    CodeBlockWriter.prototype.conditionalWrite = function (condition, str) {
        if (condition)
            this.write(str);
        return this;
    };
    CodeBlockWriter.prototype.write = function (str) {
        this.newLineIfNewLineOnNextWrite();
        this.writeIndentingNewLines(str);
        return this;
    };
    CodeBlockWriter.prototype.getLength = function () {
        return this._text.length;
    };
    CodeBlockWriter.prototype.toString = function () {
        return this.removeConsecutiveNewLineAtEndOfString(this._text);
    };
    CodeBlockWriter.prototype.writeIndentingNewLines = function (str) {
        var _this = this;
        var items = (str || "").split(/\r?\n/);
        items.forEach(function (s, i) {
            if (i > 0)
                _this.baseWrite(_this._newLine);
            _this.baseWrite(s);
            if (i > 0 && i === items.length - 1 && s.length === 0)
                _this.baseWrite(_this._newLine);
        });
    };
    CodeBlockWriter.prototype.baseWrite = function (str) {
        this._isAtStartOfBlock = false;
        if (str == null || str.length === 0)
            return this;
        if (str !== this._newLine && this.isLastCharANewLine())
            this.writeIndentation();
        this._text += str;
        return this;
    };
    CodeBlockWriter.prototype.removeConsecutiveNewLineAtEndOfString = function (text) {
        var consecutiveNewline = this._newLine + this._newLine;
        var lastIndexOfConsecutiveNewLines = text.lastIndexOf(consecutiveNewline);
        if (lastIndexOfConsecutiveNewLines >= 0 && lastIndexOfConsecutiveNewLines === text.length - consecutiveNewline.length)
            text = text.substr(0, text.length - this._newLine.length);
        return text;
    };
    CodeBlockWriter.prototype.isLastCharANewLine = function () {
        return this._text.indexOf(this._newLine, this._text.length - this._newLine.length) !== -1;
    };
    CodeBlockWriter.prototype.getLastChar = function () {
        var lastChar = null;
        if (this._text.length > 0)
            lastChar = this._text[this._text.length - 1];
        return lastChar;
    };
    CodeBlockWriter.prototype.writeIndentation = function () {
        this._text += Array(this._currentIndentation + 1).join(this._indentationText);
    };
    CodeBlockWriter.prototype.newLineIfNewLineOnNextWrite = function () {
        if (!this._newLineOnNextWrite)
            return;
        this._newLineOnNextWrite = false;
        this.newLine();
    };
    return CodeBlockWriter;
}());
exports.default = CodeBlockWriter;
function getIndentationText(useTabs, numberSpaces) {
    if (useTabs)
        return "\t";
    return Array(numberSpaces + 1).join(" ");
}

//# sourceMappingURL=code-block-writer.js.map
